#include <stdlib.h>
#include <string.h>
#include "nengo_io.h"

#define N_OUTPUTS %d

void nengo_io(runState *s) {
    // use the last element in userData as a quit flag
    if (s->userData[1023] != 0) {
        return;
    }

    int count[1];
    readChannel("nengo_io_h2c", count, 1);
    //printf("count %%d\n", count[0]);
    if (count[0] < 0) {
        // a negative value indicates we should stop
        s->userData[1023] = 1;
        printf("stopping\n");
        return;
    }

    int spike[2];
    for (int i=0; i<count[0]; i++) {
        readChannel("nengo_io_h2c", spike, 2);
        //printf("send spike %%d.%%d\n", spike[0], spike[1]);
        CoreId coreId = (CoreId) {.id=spike[0]};
        nx_send_discrete_spike(s->time, coreId, spike[1]);
    }

    int output[N_OUTPUTS];
    output[0] = s->time;

%s
%s

    writeChannel("nengo_io_c2h", output, N_OUTPUTS);
}
